/**
 * myapp
 *
 * Contact: alan@columbia.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { CourseRequest } from '../model/courseRequest';
// @ts-ignore
import { CourseResponse } from '../model/courseResponse';
// @ts-ignore
import { CourseTermsRelationShips } from '../model/courseTermsRelationShips';
// @ts-ignore
import { CourseTermsRelationShipsResponse } from '../model/courseTermsRelationShipsResponse';
// @ts-ignore
import { PaginatedCourseList } from '../model/paginatedCourseList';
// @ts-ignore
import { PatchedCourseRequest } from '../model/patchedCourseRequest';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class CoursesService {

    protected basePath = 'http://localhost:8000';
    public defaultHeaders = new HttpHeaders({'Content-Type': 'application/vnd.api+json'});
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * View for course_terms.relationships
     * @param id
     * @param relatedField Pass in one of the possible relation types to get all related objects.
     * @param courseTermsRelationShips
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public courseTermsRelationshipsCreate(id: string, relatedField: 'course' | 'Instructor_course_terms+' | 'instructors' | 'grade', courseTermsRelationShips?: CourseTermsRelationShips, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<CourseTermsRelationShipsResponse>;
    public courseTermsRelationshipsCreate(id: string, relatedField: 'course' | 'Instructor_course_terms+' | 'instructors' | 'grade', courseTermsRelationShips?: CourseTermsRelationShips, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CourseTermsRelationShipsResponse>>;
    public courseTermsRelationshipsCreate(id: string, relatedField: 'course' | 'Instructor_course_terms+' | 'instructors' | 'grade', courseTermsRelationShips?: CourseTermsRelationShips, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CourseTermsRelationShipsResponse>>;
    public courseTermsRelationshipsCreate(id: string, relatedField: 'course' | 'Instructor_course_terms+' | 'instructors' | 'grade', courseTermsRelationShips?: CourseTermsRelationShips, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling courseTermsRelationshipsCreate.');
        }
        if (relatedField === null || relatedField === undefined) {
            throw new Error('Required parameter relatedField was null or undefined when calling courseTermsRelationshipsCreate.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.api+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/vnd.api+json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/course_terms/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/relationships/${this.configuration.encodeParam({name: "relatedField", value: relatedField, in: "path", style: "simple", explode: false, dataType: "'course' | 'Instructor_course_terms+' | 'instructors' | 'grade'", dataFormat: undefined})}/`;
        return this.httpClient.request<CourseTermsRelationShipsResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: courseTermsRelationShips,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * View for course_terms.relationships
     * @param id
     * @param relatedField Pass in one of the possible relation types to get all related objects.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public courseTermsRelationshipsDestroy(id: string, relatedField: 'course' | 'Instructor_course_terms+' | 'instructors' | 'grade', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public courseTermsRelationshipsDestroy(id: string, relatedField: 'course' | 'Instructor_course_terms+' | 'instructors' | 'grade', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public courseTermsRelationshipsDestroy(id: string, relatedField: 'course' | 'Instructor_course_terms+' | 'instructors' | 'grade', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public courseTermsRelationshipsDestroy(id: string, relatedField: 'course' | 'Instructor_course_terms+' | 'instructors' | 'grade', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling courseTermsRelationshipsDestroy.');
        }
        if (relatedField === null || relatedField === undefined) {
            throw new Error('Required parameter relatedField was null or undefined when calling courseTermsRelationshipsDestroy.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/course_terms/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/relationships/${this.configuration.encodeParam({name: "relatedField", value: relatedField, in: "path", style: "simple", explode: false, dataType: "'course' | 'Instructor_course_terms+' | 'instructors' | 'grade'", dataFormat: undefined})}/`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * View for course_terms.relationships
     * @param id
     * @param relatedField Pass in one of the possible relation types to get all related objects.
     * @param courseTermsRelationShips
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public courseTermsRelationshipsPartialUpdate(id: string, relatedField: 'course' | 'Instructor_course_terms+' | 'instructors' | 'grade', courseTermsRelationShips?: CourseTermsRelationShips, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<CourseTermsRelationShipsResponse>;
    public courseTermsRelationshipsPartialUpdate(id: string, relatedField: 'course' | 'Instructor_course_terms+' | 'instructors' | 'grade', courseTermsRelationShips?: CourseTermsRelationShips, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CourseTermsRelationShipsResponse>>;
    public courseTermsRelationshipsPartialUpdate(id: string, relatedField: 'course' | 'Instructor_course_terms+' | 'instructors' | 'grade', courseTermsRelationShips?: CourseTermsRelationShips, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CourseTermsRelationShipsResponse>>;
    public courseTermsRelationshipsPartialUpdate(id: string, relatedField: 'course' | 'Instructor_course_terms+' | 'instructors' | 'grade', courseTermsRelationShips?: CourseTermsRelationShips, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling courseTermsRelationshipsPartialUpdate.');
        }
        if (relatedField === null || relatedField === undefined) {
            throw new Error('Required parameter relatedField was null or undefined when calling courseTermsRelationshipsPartialUpdate.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.api+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/vnd.api+json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/course_terms/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/relationships/${this.configuration.encodeParam({name: "relatedField", value: relatedField, in: "path", style: "simple", explode: false, dataType: "'course' | 'Instructor_course_terms+' | 'instructors' | 'grade'", dataFormat: undefined})}/`;
        return this.httpClient.request<CourseTermsRelationShipsResponse>('patch', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: courseTermsRelationShips,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * View for course_terms.relationships
     * @param id
     * @param relatedField Pass in one of the possible relation types to get all related objects.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public courseTermsRelationshipsRetrieve(id: string, relatedField: 'course' | 'Instructor_course_terms+' | 'instructors' | 'grade', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<CourseTermsRelationShipsResponse>;
    public courseTermsRelationshipsRetrieve(id: string, relatedField: 'course' | 'Instructor_course_terms+' | 'instructors' | 'grade', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CourseTermsRelationShipsResponse>>;
    public courseTermsRelationshipsRetrieve(id: string, relatedField: 'course' | 'Instructor_course_terms+' | 'instructors' | 'grade', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CourseTermsRelationShipsResponse>>;
    public courseTermsRelationshipsRetrieve(id: string, relatedField: 'course' | 'Instructor_course_terms+' | 'instructors' | 'grade', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling courseTermsRelationshipsRetrieve.');
        }
        if (relatedField === null || relatedField === undefined) {
            throw new Error('Required parameter relatedField was null or undefined when calling courseTermsRelationshipsRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.api+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/course_terms/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/relationships/${this.configuration.encodeParam({name: "relatedField", value: relatedField, in: "path", style: "simple", explode: false, dataType: "'course' | 'Instructor_course_terms+' | 'instructors' | 'grade'", dataFormat: undefined})}/`;
        return this.httpClient.request<CourseTermsRelationShipsResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A course of instruction. e.g. COMSW1002 Computing in Context
     * @param courseRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public coursesCreate(courseRequest: CourseRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<CourseResponse>;
    public coursesCreate(courseRequest: CourseRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CourseResponse>>;
    public coursesCreate(courseRequest: CourseRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CourseResponse>>;
    public coursesCreate(courseRequest: CourseRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (courseRequest === null || courseRequest === undefined) {
            throw new Error('Required parameter courseRequest was null or undefined when calling coursesCreate.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.api+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/vnd.api+json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/courses/`;
        return this.httpClient.request<CourseResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: courseRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A course of instruction. e.g. COMSW1002 Computing in Context
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public coursesDestroy(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public coursesDestroy(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public coursesDestroy(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public coursesDestroy(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesDestroy.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/courses/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A course of instruction. e.g. COMSW1002 Computing in Context
     * @param fieldsCourses endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
     * @param filterCourseDescription
     * @param filterCourseDescriptionContains
     * @param filterCourseDescriptionGt
     * @param filterCourseDescriptionGte
     * @param filterCourseDescriptionIcontains
     * @param filterCourseDescriptionIexact
     * @param filterCourseDescriptionIn Multiple values may be separated by commas.
     * @param filterCourseDescriptionLt
     * @param filterCourseDescriptionLte
     * @param filterCourseIdentifier
     * @param filterCourseIdentifierContains
     * @param filterCourseIdentifierGt
     * @param filterCourseIdentifierGte
     * @param filterCourseIdentifierIcontains
     * @param filterCourseIdentifierIexact
     * @param filterCourseIdentifierIn Multiple values may be separated by commas.
     * @param filterCourseIdentifierLt
     * @param filterCourseIdentifierLte
     * @param filterCourseName
     * @param filterCourseNameContains
     * @param filterCourseNameIcontains
     * @param filterCourseNameIexact
     * @param filterCourseNumber
     * @param filterCourseTermsTermIdentifier
     * @param filterCourseTermsTermIdentifierGt
     * @param filterCourseTermsTermIdentifierGte
     * @param filterCourseTermsTermIdentifierIn Multiple values may be separated by commas.
     * @param filterCourseTermsTermIdentifierLt
     * @param filterCourseTermsTermIdentifierLte
     * @param filterId
     * @param filterIdGt
     * @param filterIdGte
     * @param filterIdIn Multiple values may be separated by commas.
     * @param filterIdLt
     * @param filterIdLte
     * @param filterSchoolBulletinPrefixCode
     * @param filterSchoolBulletinPrefixCodeRegex
     * @param filterSearch A search term.
     * @param filterSubjectAreaCode
     * @param filterSubjectAreaCodeGt
     * @param filterSubjectAreaCodeGte
     * @param filterSubjectAreaCodeIn Multiple values may be separated by commas.
     * @param filterSubjectAreaCodeLt
     * @param filterSubjectAreaCodeLte
     * @param include include query parameter to allow the client to customize which related resources should be returned.
     * @param pageNumber A page number within the paginated result set.
     * @param pageSize Number of results to return per page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public coursesList(fieldsCourses?: Array<'url' | 'course_terms' | 'effective_start_date' | 'effective_end_date' | 'last_mod_user_name' | 'last_mod_date' | 'school_bulletin_prefix_code' | 'suffix_two' | 'subject_area_code' | 'course_number' | 'course_identifier' | 'course_name' | 'course_description'>, filterCourseDescription?: string, filterCourseDescriptionContains?: string, filterCourseDescriptionGt?: string, filterCourseDescriptionGte?: string, filterCourseDescriptionIcontains?: string, filterCourseDescriptionIexact?: string, filterCourseDescriptionIn?: Array<string>, filterCourseDescriptionLt?: string, filterCourseDescriptionLte?: string, filterCourseIdentifier?: string, filterCourseIdentifierContains?: string, filterCourseIdentifierGt?: string, filterCourseIdentifierGte?: string, filterCourseIdentifierIcontains?: string, filterCourseIdentifierIexact?: string, filterCourseIdentifierIn?: Array<string>, filterCourseIdentifierLt?: string, filterCourseIdentifierLte?: string, filterCourseName?: string, filterCourseNameContains?: string, filterCourseNameIcontains?: string, filterCourseNameIexact?: string, filterCourseNumber?: string, filterCourseTermsTermIdentifier?: string, filterCourseTermsTermIdentifierGt?: string, filterCourseTermsTermIdentifierGte?: string, filterCourseTermsTermIdentifierIn?: Array<string>, filterCourseTermsTermIdentifierLt?: string, filterCourseTermsTermIdentifierLte?: string, filterId?: string, filterIdGt?: string, filterIdGte?: string, filterIdIn?: Array<string>, filterIdLt?: string, filterIdLte?: string, filterSchoolBulletinPrefixCode?: string, filterSchoolBulletinPrefixCodeRegex?: string, filterSearch?: string, filterSubjectAreaCode?: string, filterSubjectAreaCodeGt?: string, filterSubjectAreaCodeGte?: string, filterSubjectAreaCodeIn?: Array<string>, filterSubjectAreaCodeLt?: string, filterSubjectAreaCodeLte?: string, include?: Array<'course_terms'>, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedCourseList>;
    public coursesList(fieldsCourses?: Array<'url' | 'course_terms' | 'effective_start_date' | 'effective_end_date' | 'last_mod_user_name' | 'last_mod_date' | 'school_bulletin_prefix_code' | 'suffix_two' | 'subject_area_code' | 'course_number' | 'course_identifier' | 'course_name' | 'course_description'>, filterCourseDescription?: string, filterCourseDescriptionContains?: string, filterCourseDescriptionGt?: string, filterCourseDescriptionGte?: string, filterCourseDescriptionIcontains?: string, filterCourseDescriptionIexact?: string, filterCourseDescriptionIn?: Array<string>, filterCourseDescriptionLt?: string, filterCourseDescriptionLte?: string, filterCourseIdentifier?: string, filterCourseIdentifierContains?: string, filterCourseIdentifierGt?: string, filterCourseIdentifierGte?: string, filterCourseIdentifierIcontains?: string, filterCourseIdentifierIexact?: string, filterCourseIdentifierIn?: Array<string>, filterCourseIdentifierLt?: string, filterCourseIdentifierLte?: string, filterCourseName?: string, filterCourseNameContains?: string, filterCourseNameIcontains?: string, filterCourseNameIexact?: string, filterCourseNumber?: string, filterCourseTermsTermIdentifier?: string, filterCourseTermsTermIdentifierGt?: string, filterCourseTermsTermIdentifierGte?: string, filterCourseTermsTermIdentifierIn?: Array<string>, filterCourseTermsTermIdentifierLt?: string, filterCourseTermsTermIdentifierLte?: string, filterId?: string, filterIdGt?: string, filterIdGte?: string, filterIdIn?: Array<string>, filterIdLt?: string, filterIdLte?: string, filterSchoolBulletinPrefixCode?: string, filterSchoolBulletinPrefixCodeRegex?: string, filterSearch?: string, filterSubjectAreaCode?: string, filterSubjectAreaCodeGt?: string, filterSubjectAreaCodeGte?: string, filterSubjectAreaCodeIn?: Array<string>, filterSubjectAreaCodeLt?: string, filterSubjectAreaCodeLte?: string, include?: Array<'course_terms'>, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedCourseList>>;
    public coursesList(fieldsCourses?: Array<'url' | 'course_terms' | 'effective_start_date' | 'effective_end_date' | 'last_mod_user_name' | 'last_mod_date' | 'school_bulletin_prefix_code' | 'suffix_two' | 'subject_area_code' | 'course_number' | 'course_identifier' | 'course_name' | 'course_description'>, filterCourseDescription?: string, filterCourseDescriptionContains?: string, filterCourseDescriptionGt?: string, filterCourseDescriptionGte?: string, filterCourseDescriptionIcontains?: string, filterCourseDescriptionIexact?: string, filterCourseDescriptionIn?: Array<string>, filterCourseDescriptionLt?: string, filterCourseDescriptionLte?: string, filterCourseIdentifier?: string, filterCourseIdentifierContains?: string, filterCourseIdentifierGt?: string, filterCourseIdentifierGte?: string, filterCourseIdentifierIcontains?: string, filterCourseIdentifierIexact?: string, filterCourseIdentifierIn?: Array<string>, filterCourseIdentifierLt?: string, filterCourseIdentifierLte?: string, filterCourseName?: string, filterCourseNameContains?: string, filterCourseNameIcontains?: string, filterCourseNameIexact?: string, filterCourseNumber?: string, filterCourseTermsTermIdentifier?: string, filterCourseTermsTermIdentifierGt?: string, filterCourseTermsTermIdentifierGte?: string, filterCourseTermsTermIdentifierIn?: Array<string>, filterCourseTermsTermIdentifierLt?: string, filterCourseTermsTermIdentifierLte?: string, filterId?: string, filterIdGt?: string, filterIdGte?: string, filterIdIn?: Array<string>, filterIdLt?: string, filterIdLte?: string, filterSchoolBulletinPrefixCode?: string, filterSchoolBulletinPrefixCodeRegex?: string, filterSearch?: string, filterSubjectAreaCode?: string, filterSubjectAreaCodeGt?: string, filterSubjectAreaCodeGte?: string, filterSubjectAreaCodeIn?: Array<string>, filterSubjectAreaCodeLt?: string, filterSubjectAreaCodeLte?: string, include?: Array<'course_terms'>, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedCourseList>>;
    public coursesList(fieldsCourses?: Array<'url' | 'course_terms' | 'effective_start_date' | 'effective_end_date' | 'last_mod_user_name' | 'last_mod_date' | 'school_bulletin_prefix_code' | 'suffix_two' | 'subject_area_code' | 'course_number' | 'course_identifier' | 'course_name' | 'course_description'>, filterCourseDescription?: string, filterCourseDescriptionContains?: string, filterCourseDescriptionGt?: string, filterCourseDescriptionGte?: string, filterCourseDescriptionIcontains?: string, filterCourseDescriptionIexact?: string, filterCourseDescriptionIn?: Array<string>, filterCourseDescriptionLt?: string, filterCourseDescriptionLte?: string, filterCourseIdentifier?: string, filterCourseIdentifierContains?: string, filterCourseIdentifierGt?: string, filterCourseIdentifierGte?: string, filterCourseIdentifierIcontains?: string, filterCourseIdentifierIexact?: string, filterCourseIdentifierIn?: Array<string>, filterCourseIdentifierLt?: string, filterCourseIdentifierLte?: string, filterCourseName?: string, filterCourseNameContains?: string, filterCourseNameIcontains?: string, filterCourseNameIexact?: string, filterCourseNumber?: string, filterCourseTermsTermIdentifier?: string, filterCourseTermsTermIdentifierGt?: string, filterCourseTermsTermIdentifierGte?: string, filterCourseTermsTermIdentifierIn?: Array<string>, filterCourseTermsTermIdentifierLt?: string, filterCourseTermsTermIdentifierLte?: string, filterId?: string, filterIdGt?: string, filterIdGte?: string, filterIdIn?: Array<string>, filterIdLt?: string, filterIdLte?: string, filterSchoolBulletinPrefixCode?: string, filterSchoolBulletinPrefixCodeRegex?: string, filterSearch?: string, filterSubjectAreaCode?: string, filterSubjectAreaCodeGt?: string, filterSubjectAreaCodeGte?: string, filterSubjectAreaCodeIn?: Array<string>, filterSubjectAreaCodeLt?: string, filterSubjectAreaCodeLte?: string, include?: Array<'course_terms'>, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (fieldsCourses) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...fieldsCourses].join(COLLECTION_FORMATS['csv']), 'fields[courses]');
        }
        if (filterCourseDescription !== undefined && filterCourseDescription !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseDescription, 'filter[course_description]');
        }
        if (filterCourseDescriptionContains !== undefined && filterCourseDescriptionContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseDescriptionContains, 'filter[course_description__contains]');
        }
        if (filterCourseDescriptionGt !== undefined && filterCourseDescriptionGt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseDescriptionGt, 'filter[course_description__gt]');
        }
        if (filterCourseDescriptionGte !== undefined && filterCourseDescriptionGte !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseDescriptionGte, 'filter[course_description__gte]');
        }
        if (filterCourseDescriptionIcontains !== undefined && filterCourseDescriptionIcontains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseDescriptionIcontains, 'filter[course_description__icontains]');
        }
        if (filterCourseDescriptionIexact !== undefined && filterCourseDescriptionIexact !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseDescriptionIexact, 'filter[course_description__iexact]');
        }
        if (filterCourseDescriptionIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...filterCourseDescriptionIn].join(COLLECTION_FORMATS['csv']), 'filter[course_description__in]');
        }
        if (filterCourseDescriptionLt !== undefined && filterCourseDescriptionLt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseDescriptionLt, 'filter[course_description__lt]');
        }
        if (filterCourseDescriptionLte !== undefined && filterCourseDescriptionLte !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseDescriptionLte, 'filter[course_description__lte]');
        }
        if (filterCourseIdentifier !== undefined && filterCourseIdentifier !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseIdentifier, 'filter[course_identifier]');
        }
        if (filterCourseIdentifierContains !== undefined && filterCourseIdentifierContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseIdentifierContains, 'filter[course_identifier__contains]');
        }
        if (filterCourseIdentifierGt !== undefined && filterCourseIdentifierGt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseIdentifierGt, 'filter[course_identifier__gt]');
        }
        if (filterCourseIdentifierGte !== undefined && filterCourseIdentifierGte !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseIdentifierGte, 'filter[course_identifier__gte]');
        }
        if (filterCourseIdentifierIcontains !== undefined && filterCourseIdentifierIcontains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseIdentifierIcontains, 'filter[course_identifier__icontains]');
        }
        if (filterCourseIdentifierIexact !== undefined && filterCourseIdentifierIexact !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseIdentifierIexact, 'filter[course_identifier__iexact]');
        }
        if (filterCourseIdentifierIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...filterCourseIdentifierIn].join(COLLECTION_FORMATS['csv']), 'filter[course_identifier__in]');
        }
        if (filterCourseIdentifierLt !== undefined && filterCourseIdentifierLt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseIdentifierLt, 'filter[course_identifier__lt]');
        }
        if (filterCourseIdentifierLte !== undefined && filterCourseIdentifierLte !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseIdentifierLte, 'filter[course_identifier__lte]');
        }
        if (filterCourseName !== undefined && filterCourseName !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseName, 'filter[course_name]');
        }
        if (filterCourseNameContains !== undefined && filterCourseNameContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseNameContains, 'filter[course_name__contains]');
        }
        if (filterCourseNameIcontains !== undefined && filterCourseNameIcontains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseNameIcontains, 'filter[course_name__icontains]');
        }
        if (filterCourseNameIexact !== undefined && filterCourseNameIexact !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseNameIexact, 'filter[course_name__iexact]');
        }
        if (filterCourseNumber !== undefined && filterCourseNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseNumber, 'filter[course_number]');
        }
        if (filterCourseTermsTermIdentifier !== undefined && filterCourseTermsTermIdentifier !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseTermsTermIdentifier, 'filter[course_terms__term_identifier]');
        }
        if (filterCourseTermsTermIdentifierGt !== undefined && filterCourseTermsTermIdentifierGt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseTermsTermIdentifierGt, 'filter[course_terms__term_identifier__gt]');
        }
        if (filterCourseTermsTermIdentifierGte !== undefined && filterCourseTermsTermIdentifierGte !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseTermsTermIdentifierGte, 'filter[course_terms__term_identifier__gte]');
        }
        if (filterCourseTermsTermIdentifierIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...filterCourseTermsTermIdentifierIn].join(COLLECTION_FORMATS['csv']), 'filter[course_terms__term_identifier__in]');
        }
        if (filterCourseTermsTermIdentifierLt !== undefined && filterCourseTermsTermIdentifierLt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseTermsTermIdentifierLt, 'filter[course_terms__term_identifier__lt]');
        }
        if (filterCourseTermsTermIdentifierLte !== undefined && filterCourseTermsTermIdentifierLte !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseTermsTermIdentifierLte, 'filter[course_terms__term_identifier__lte]');
        }
        if (filterId !== undefined && filterId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterId, 'filter[id]');
        }
        if (filterIdGt !== undefined && filterIdGt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterIdGt, 'filter[id__gt]');
        }
        if (filterIdGte !== undefined && filterIdGte !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterIdGte, 'filter[id__gte]');
        }
        if (filterIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...filterIdIn].join(COLLECTION_FORMATS['csv']), 'filter[id__in]');
        }
        if (filterIdLt !== undefined && filterIdLt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterIdLt, 'filter[id__lt]');
        }
        if (filterIdLte !== undefined && filterIdLte !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterIdLte, 'filter[id__lte]');
        }
        if (filterSchoolBulletinPrefixCode !== undefined && filterSchoolBulletinPrefixCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterSchoolBulletinPrefixCode, 'filter[school_bulletin_prefix_code]');
        }
        if (filterSchoolBulletinPrefixCodeRegex !== undefined && filterSchoolBulletinPrefixCodeRegex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterSchoolBulletinPrefixCodeRegex, 'filter[school_bulletin_prefix_code__regex]');
        }
        if (filterSearch !== undefined && filterSearch !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterSearch, 'filter[search]');
        }
        if (filterSubjectAreaCode !== undefined && filterSubjectAreaCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterSubjectAreaCode, 'filter[subject_area_code]');
        }
        if (filterSubjectAreaCodeGt !== undefined && filterSubjectAreaCodeGt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterSubjectAreaCodeGt, 'filter[subject_area_code__gt]');
        }
        if (filterSubjectAreaCodeGte !== undefined && filterSubjectAreaCodeGte !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterSubjectAreaCodeGte, 'filter[subject_area_code__gte]');
        }
        if (filterSubjectAreaCodeIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...filterSubjectAreaCodeIn].join(COLLECTION_FORMATS['csv']), 'filter[subject_area_code__in]');
        }
        if (filterSubjectAreaCodeLt !== undefined && filterSubjectAreaCodeLt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterSubjectAreaCodeLt, 'filter[subject_area_code__lt]');
        }
        if (filterSubjectAreaCodeLte !== undefined && filterSubjectAreaCodeLte !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterSubjectAreaCodeLte, 'filter[subject_area_code__lte]');
        }
        if (include) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...include].join(COLLECTION_FORMATS['csv']), 'include');
        }
        if (pageNumber !== undefined && pageNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageNumber, 'page[number]');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'page[size]');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.api+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/courses/`;
        return this.httpClient.request<PaginatedCourseList>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A course of instruction. e.g. COMSW1002 Computing in Context
     * @param id
     * @param patchedCourseRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public coursesPartialUpdate(id: string, patchedCourseRequest: PatchedCourseRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<CourseResponse>;
    public coursesPartialUpdate(id: string, patchedCourseRequest: PatchedCourseRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CourseResponse>>;
    public coursesPartialUpdate(id: string, patchedCourseRequest: PatchedCourseRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CourseResponse>>;
    public coursesPartialUpdate(id: string, patchedCourseRequest: PatchedCourseRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesPartialUpdate.');
        }
        if (patchedCourseRequest === null || patchedCourseRequest === undefined) {
            throw new Error('Required parameter patchedCourseRequest was null or undefined when calling coursesPartialUpdate.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.api+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/vnd.api+json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/courses/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/`;
        return this.httpClient.request<CourseResponse>('patch', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: patchedCourseRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A course of instruction. e.g. COMSW1002 Computing in Context
     * @param id
     * @param fieldsCourses endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
     * @param include include query parameter to allow the client to customize which related resources should be returned.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public coursesRetrieve(id: string, fieldsCourses?: Array<'url' | 'course_terms' | 'effective_start_date' | 'effective_end_date' | 'last_mod_user_name' | 'last_mod_date' | 'school_bulletin_prefix_code' | 'suffix_two' | 'subject_area_code' | 'course_number' | 'course_identifier' | 'course_name' | 'course_description'>, include?: Array<'course_terms'>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<CourseResponse>;
    public coursesRetrieve(id: string, fieldsCourses?: Array<'url' | 'course_terms' | 'effective_start_date' | 'effective_end_date' | 'last_mod_user_name' | 'last_mod_date' | 'school_bulletin_prefix_code' | 'suffix_two' | 'subject_area_code' | 'course_number' | 'course_identifier' | 'course_name' | 'course_description'>, include?: Array<'course_terms'>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CourseResponse>>;
    public coursesRetrieve(id: string, fieldsCourses?: Array<'url' | 'course_terms' | 'effective_start_date' | 'effective_end_date' | 'last_mod_user_name' | 'last_mod_date' | 'school_bulletin_prefix_code' | 'suffix_two' | 'subject_area_code' | 'course_number' | 'course_identifier' | 'course_name' | 'course_description'>, include?: Array<'course_terms'>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CourseResponse>>;
    public coursesRetrieve(id: string, fieldsCourses?: Array<'url' | 'course_terms' | 'effective_start_date' | 'effective_end_date' | 'last_mod_user_name' | 'last_mod_date' | 'school_bulletin_prefix_code' | 'suffix_two' | 'subject_area_code' | 'course_number' | 'course_identifier' | 'course_name' | 'course_description'>, include?: Array<'course_terms'>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesRetrieve.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (fieldsCourses) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...fieldsCourses].join(COLLECTION_FORMATS['csv']), 'fields[courses]');
        }
        if (include) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...include].join(COLLECTION_FORMATS['csv']), 'include');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.api+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/courses/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/`;
        return this.httpClient.request<CourseResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A course of instruction. e.g. COMSW1002 Computing in Context
     * @param id
     * @param relatedField
     * @param fieldsCourses endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter.
     * @param include include query parameter to allow the client to customize which related resources should be returned.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public coursesRetrieve2(id: string, relatedField: string, fieldsCourses?: Array<'url' | 'course_terms' | 'effective_start_date' | 'effective_end_date' | 'last_mod_user_name' | 'last_mod_date' | 'school_bulletin_prefix_code' | 'suffix_two' | 'subject_area_code' | 'course_number' | 'course_identifier' | 'course_name' | 'course_description'>, include?: Array<'course_terms'>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<CourseResponse>;
    public coursesRetrieve2(id: string, relatedField: string, fieldsCourses?: Array<'url' | 'course_terms' | 'effective_start_date' | 'effective_end_date' | 'last_mod_user_name' | 'last_mod_date' | 'school_bulletin_prefix_code' | 'suffix_two' | 'subject_area_code' | 'course_number' | 'course_identifier' | 'course_name' | 'course_description'>, include?: Array<'course_terms'>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CourseResponse>>;
    public coursesRetrieve2(id: string, relatedField: string, fieldsCourses?: Array<'url' | 'course_terms' | 'effective_start_date' | 'effective_end_date' | 'last_mod_user_name' | 'last_mod_date' | 'school_bulletin_prefix_code' | 'suffix_two' | 'subject_area_code' | 'course_number' | 'course_identifier' | 'course_name' | 'course_description'>, include?: Array<'course_terms'>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CourseResponse>>;
    public coursesRetrieve2(id: string, relatedField: string, fieldsCourses?: Array<'url' | 'course_terms' | 'effective_start_date' | 'effective_end_date' | 'last_mod_user_name' | 'last_mod_date' | 'school_bulletin_prefix_code' | 'suffix_two' | 'subject_area_code' | 'course_number' | 'course_identifier' | 'course_name' | 'course_description'>, include?: Array<'course_terms'>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesRetrieve2.');
        }
        if (relatedField === null || relatedField === undefined) {
            throw new Error('Required parameter relatedField was null or undefined when calling coursesRetrieve2.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (fieldsCourses) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...fieldsCourses].join(COLLECTION_FORMATS['csv']), 'fields[courses]');
        }
        if (include) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...include].join(COLLECTION_FORMATS['csv']), 'include');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.api+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/courses/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/${this.configuration.encodeParam({name: "relatedField", value: relatedField, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/`;
        return this.httpClient.request<CourseResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
