/**
 * myapp
 *
 * Contact: alan@columbia.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { CourseTermRequest } from '../model/courseTermRequest';
// @ts-ignore
import { CourseTermResponse } from '../model/courseTermResponse';
// @ts-ignore
import { CoursesRelationShips } from '../model/coursesRelationShips';
// @ts-ignore
import { CoursesRelationShipsResponse } from '../model/coursesRelationShipsResponse';
// @ts-ignore
import { PaginatedCourseTermList } from '../model/paginatedCourseTermList';
// @ts-ignore
import { PatchedCourseTermRequest } from '../model/patchedCourseTermRequest';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


export interface CourseTermsCreateRequestParams {
    courseTermRequest: CourseTermRequest;
}

export interface CourseTermsDestroyRequestParams {
    id: string;
}

export interface CourseTermsListRequestParams {
    /** endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter. */
    fieldsCourseTerms?: Array<'url' | 'course' | 'instructors' | 'effective_start_date' | 'effective_end_date' | 'last_mod_user_name' | 'last_mod_date' | 'term_identifier' | 'audit_permitted_code' | 'exam_credit_flag'>;
    filterAuditPermittedCode?: number;
    filterCourseId?: string;
    filterCourseIdGt?: string;
    filterCourseIdGte?: string;
    /** Multiple values may be separated by commas. */
    filterCourseIdIn?: Array<string>;
    filterCourseIdLt?: string;
    filterCourseIdLte?: string;
    filterExamCreditFlag?: boolean;
    filterId?: string;
    filterIdGt?: string;
    filterIdGte?: string;
    /** Multiple values may be separated by commas. */
    filterIdIn?: Array<string>;
    filterIdLt?: string;
    filterIdLte?: string;
    /** A search term. */
    filterSearch?: string;
    filterTermIdentifier?: string;
    filterTermIdentifierGt?: string;
    filterTermIdentifierGte?: string;
    /** Multiple values may be separated by commas. */
    filterTermIdentifierIn?: Array<string>;
    filterTermIdentifierLt?: string;
    filterTermIdentifierLte?: string;
    /** include query parameter to allow the client to customize which related resources should be returned. */
    include?: Array<'course' | 'instructors'>;
    /** A page number within the paginated result set. */
    pageNumber?: number;
    /** Number of results to return per page. */
    pageSize?: number;
    /** [list of fields to sort by](https://jsonapi.org/format/#fetching-sorting) */
    sort?: Array<'term_identifier' | '-term_identifier' | 'audit_permitted_code' | '-audit_permitted_code' | 'exam_credit_flag' | '-exam_credit_flag'>;
}

export interface CourseTermsPartialUpdateRequestParams {
    id: string;
    patchedCourseTermRequest: PatchedCourseTermRequest;
}

export interface CourseTermsRetrieveRequestParams {
    id: string;
    /** endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter. */
    fieldsCourseTerms?: Array<'url' | 'course' | 'instructors' | 'effective_start_date' | 'effective_end_date' | 'last_mod_user_name' | 'last_mod_date' | 'term_identifier' | 'audit_permitted_code' | 'exam_credit_flag'>;
    /** include query parameter to allow the client to customize which related resources should be returned. */
    include?: Array<'course' | 'instructors'>;
}

export interface CourseTermsRetrieve2RequestParams {
    id: string;
    relatedField: string;
    /** endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] query parameter. */
    fieldsCourseTerms?: Array<'url' | 'course' | 'instructors' | 'effective_start_date' | 'effective_end_date' | 'last_mod_user_name' | 'last_mod_date' | 'term_identifier' | 'audit_permitted_code' | 'exam_credit_flag'>;
    /** include query parameter to allow the client to customize which related resources should be returned. */
    include?: Array<'course' | 'instructors'>;
}

export interface CoursesRelationshipsCreateRequestParams {
    id: string;
    /** Pass in one of the possible relation types to get all related objects. */
    relatedField: 'course_terms';
    coursesRelationShips?: CoursesRelationShips | null;
}

export interface CoursesRelationshipsDestroyRequestParams {
    id: string;
    /** Pass in one of the possible relation types to get all related objects. */
    relatedField: 'course_terms';
}

export interface CoursesRelationshipsPartialUpdateRequestParams {
    id: string;
    /** Pass in one of the possible relation types to get all related objects. */
    relatedField: 'course_terms';
    coursesRelationShips?: CoursesRelationShips | null;
}

export interface CoursesRelationshipsRetrieveRequestParams {
    id: string;
    /** Pass in one of the possible relation types to get all related objects. */
    relatedField: 'course_terms';
}


@Injectable({
  providedIn: 'root'
})
export class CourseTermsService {

    protected basePath = 'http://localhost:8000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * A specific course term (year+semester) instance. e.g. 20183COMSW1002
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public courseTermsCreate(requestParameters?: CourseTermsCreateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<CourseTermResponse>;
    public courseTermsCreate(requestParameters?: CourseTermsCreateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CourseTermResponse>>;
    public courseTermsCreate(requestParameters?: CourseTermsCreateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CourseTermResponse>>;
    public courseTermsCreate(requestParameters?: CourseTermsCreateRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const courseTermRequest = requestParameters?.courseTermRequest;
        if (courseTermRequest === null || courseTermRequest === undefined) {
            throw new Error('Required parameter courseTermRequest was null or undefined when calling courseTermsCreate.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.api+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/vnd.api+json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/course_terms/`;
        return this.httpClient.request<CourseTermResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: courseTermRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A specific course term (year+semester) instance. e.g. 20183COMSW1002
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public courseTermsDestroy(requestParameters?: CourseTermsDestroyRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public courseTermsDestroy(requestParameters?: CourseTermsDestroyRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public courseTermsDestroy(requestParameters?: CourseTermsDestroyRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public courseTermsDestroy(requestParameters?: CourseTermsDestroyRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling courseTermsDestroy.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/course_terms/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A specific course term (year+semester) instance. e.g. 20183COMSW1002
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public courseTermsList(requestParameters?: CourseTermsListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<PaginatedCourseTermList>;
    public courseTermsList(requestParameters?: CourseTermsListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PaginatedCourseTermList>>;
    public courseTermsList(requestParameters?: CourseTermsListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PaginatedCourseTermList>>;
    public courseTermsList(requestParameters?: CourseTermsListRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const fieldsCourseTerms = requestParameters?.fieldsCourseTerms;
        const filterAuditPermittedCode = requestParameters?.filterAuditPermittedCode;
        const filterCourseId = requestParameters?.filterCourseId;
        const filterCourseIdGt = requestParameters?.filterCourseIdGt;
        const filterCourseIdGte = requestParameters?.filterCourseIdGte;
        const filterCourseIdIn = requestParameters?.filterCourseIdIn;
        const filterCourseIdLt = requestParameters?.filterCourseIdLt;
        const filterCourseIdLte = requestParameters?.filterCourseIdLte;
        const filterExamCreditFlag = requestParameters?.filterExamCreditFlag;
        const filterId = requestParameters?.filterId;
        const filterIdGt = requestParameters?.filterIdGt;
        const filterIdGte = requestParameters?.filterIdGte;
        const filterIdIn = requestParameters?.filterIdIn;
        const filterIdLt = requestParameters?.filterIdLt;
        const filterIdLte = requestParameters?.filterIdLte;
        const filterSearch = requestParameters?.filterSearch;
        const filterTermIdentifier = requestParameters?.filterTermIdentifier;
        const filterTermIdentifierGt = requestParameters?.filterTermIdentifierGt;
        const filterTermIdentifierGte = requestParameters?.filterTermIdentifierGte;
        const filterTermIdentifierIn = requestParameters?.filterTermIdentifierIn;
        const filterTermIdentifierLt = requestParameters?.filterTermIdentifierLt;
        const filterTermIdentifierLte = requestParameters?.filterTermIdentifierLte;
        const include = requestParameters?.include;
        const pageNumber = requestParameters?.pageNumber;
        const pageSize = requestParameters?.pageSize;
        const sort = requestParameters?.sort;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (fieldsCourseTerms) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...fieldsCourseTerms].join(COLLECTION_FORMATS['csv']), 'fields[course_terms]');
        }
        if (filterAuditPermittedCode !== undefined && filterAuditPermittedCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterAuditPermittedCode, 'filter[audit_permitted_code]');
        }
        if (filterCourseId !== undefined && filterCourseId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseId, 'filter[course__id]');
        }
        if (filterCourseIdGt !== undefined && filterCourseIdGt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseIdGt, 'filter[course__id__gt]');
        }
        if (filterCourseIdGte !== undefined && filterCourseIdGte !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseIdGte, 'filter[course__id__gte]');
        }
        if (filterCourseIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...filterCourseIdIn].join(COLLECTION_FORMATS['csv']), 'filter[course__id__in]');
        }
        if (filterCourseIdLt !== undefined && filterCourseIdLt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseIdLt, 'filter[course__id__lt]');
        }
        if (filterCourseIdLte !== undefined && filterCourseIdLte !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterCourseIdLte, 'filter[course__id__lte]');
        }
        if (filterExamCreditFlag !== undefined && filterExamCreditFlag !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterExamCreditFlag, 'filter[exam_credit_flag]');
        }
        if (filterId !== undefined && filterId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterId, 'filter[id]');
        }
        if (filterIdGt !== undefined && filterIdGt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterIdGt, 'filter[id__gt]');
        }
        if (filterIdGte !== undefined && filterIdGte !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterIdGte, 'filter[id__gte]');
        }
        if (filterIdIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...filterIdIn].join(COLLECTION_FORMATS['csv']), 'filter[id__in]');
        }
        if (filterIdLt !== undefined && filterIdLt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterIdLt, 'filter[id__lt]');
        }
        if (filterIdLte !== undefined && filterIdLte !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterIdLte, 'filter[id__lte]');
        }
        if (filterSearch !== undefined && filterSearch !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterSearch, 'filter[search]');
        }
        if (filterTermIdentifier !== undefined && filterTermIdentifier !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterTermIdentifier, 'filter[term_identifier]');
        }
        if (filterTermIdentifierGt !== undefined && filterTermIdentifierGt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterTermIdentifierGt, 'filter[term_identifier__gt]');
        }
        if (filterTermIdentifierGte !== undefined && filterTermIdentifierGte !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterTermIdentifierGte, 'filter[term_identifier__gte]');
        }
        if (filterTermIdentifierIn) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...filterTermIdentifierIn].join(COLLECTION_FORMATS['csv']), 'filter[term_identifier__in]');
        }
        if (filterTermIdentifierLt !== undefined && filterTermIdentifierLt !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterTermIdentifierLt, 'filter[term_identifier__lt]');
        }
        if (filterTermIdentifierLte !== undefined && filterTermIdentifierLte !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>filterTermIdentifierLte, 'filter[term_identifier__lte]');
        }
        if (include) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...include].join(COLLECTION_FORMATS['csv']), 'include');
        }
        if (pageNumber !== undefined && pageNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageNumber, 'page[number]');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'page[size]');
        }
        if (sort) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...sort].join(COLLECTION_FORMATS['csv']), 'sort');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.api+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/course_terms/`;
        return this.httpClient.request<PaginatedCourseTermList>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A specific course term (year+semester) instance. e.g. 20183COMSW1002
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public courseTermsPartialUpdate(requestParameters?: CourseTermsPartialUpdateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<CourseTermResponse>;
    public courseTermsPartialUpdate(requestParameters?: CourseTermsPartialUpdateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CourseTermResponse>>;
    public courseTermsPartialUpdate(requestParameters?: CourseTermsPartialUpdateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CourseTermResponse>>;
    public courseTermsPartialUpdate(requestParameters?: CourseTermsPartialUpdateRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling courseTermsPartialUpdate.');
        }
        const patchedCourseTermRequest = requestParameters?.patchedCourseTermRequest;
        if (patchedCourseTermRequest === null || patchedCourseTermRequest === undefined) {
            throw new Error('Required parameter patchedCourseTermRequest was null or undefined when calling courseTermsPartialUpdate.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.api+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/vnd.api+json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/course_terms/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/`;
        return this.httpClient.request<CourseTermResponse>('patch', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: patchedCourseTermRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A specific course term (year+semester) instance. e.g. 20183COMSW1002
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public courseTermsRetrieve(requestParameters?: CourseTermsRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<CourseTermResponse>;
    public courseTermsRetrieve(requestParameters?: CourseTermsRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CourseTermResponse>>;
    public courseTermsRetrieve(requestParameters?: CourseTermsRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CourseTermResponse>>;
    public courseTermsRetrieve(requestParameters?: CourseTermsRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling courseTermsRetrieve.');
        }
        const fieldsCourseTerms = requestParameters?.fieldsCourseTerms;
        const include = requestParameters?.include;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (fieldsCourseTerms) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...fieldsCourseTerms].join(COLLECTION_FORMATS['csv']), 'fields[course_terms]');
        }
        if (include) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...include].join(COLLECTION_FORMATS['csv']), 'include');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.api+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/course_terms/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/`;
        return this.httpClient.request<CourseTermResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A specific course term (year+semester) instance. e.g. 20183COMSW1002
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public courseTermsRetrieve2(requestParameters?: CourseTermsRetrieve2RequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<CourseTermResponse>;
    public courseTermsRetrieve2(requestParameters?: CourseTermsRetrieve2RequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CourseTermResponse>>;
    public courseTermsRetrieve2(requestParameters?: CourseTermsRetrieve2RequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CourseTermResponse>>;
    public courseTermsRetrieve2(requestParameters?: CourseTermsRetrieve2RequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling courseTermsRetrieve2.');
        }
        const relatedField = requestParameters?.relatedField;
        if (relatedField === null || relatedField === undefined) {
            throw new Error('Required parameter relatedField was null or undefined when calling courseTermsRetrieve2.');
        }
        const fieldsCourseTerms = requestParameters?.fieldsCourseTerms;
        const include = requestParameters?.include;

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (fieldsCourseTerms) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...fieldsCourseTerms].join(COLLECTION_FORMATS['csv']), 'fields[course_terms]');
        }
        if (include) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...include].join(COLLECTION_FORMATS['csv']), 'include');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.api+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/course_terms/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/${this.configuration.encodeParam({name: "relatedField", value: relatedField, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/`;
        return this.httpClient.request<CourseTermResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * View for courses.relationships
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public coursesRelationshipsCreate(requestParameters?: CoursesRelationshipsCreateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<CoursesRelationShipsResponse>;
    public coursesRelationshipsCreate(requestParameters?: CoursesRelationshipsCreateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CoursesRelationShipsResponse>>;
    public coursesRelationshipsCreate(requestParameters?: CoursesRelationshipsCreateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CoursesRelationShipsResponse>>;
    public coursesRelationshipsCreate(requestParameters?: CoursesRelationshipsCreateRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesRelationshipsCreate.');
        }
        const relatedField = requestParameters?.relatedField;
        if (relatedField === null || relatedField === undefined) {
            throw new Error('Required parameter relatedField was null or undefined when calling coursesRelationshipsCreate.');
        }
        const coursesRelationShips = requestParameters?.coursesRelationShips;

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.api+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/vnd.api+json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/courses/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/relationships/${this.configuration.encodeParam({name: "relatedField", value: relatedField, in: "path", style: "simple", explode: false, dataType: "'course_terms'", dataFormat: undefined})}/`;
        return this.httpClient.request<CoursesRelationShipsResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: coursesRelationShips,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * View for courses.relationships
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public coursesRelationshipsDestroy(requestParameters?: CoursesRelationshipsDestroyRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public coursesRelationshipsDestroy(requestParameters?: CoursesRelationshipsDestroyRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public coursesRelationshipsDestroy(requestParameters?: CoursesRelationshipsDestroyRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public coursesRelationshipsDestroy(requestParameters?: CoursesRelationshipsDestroyRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesRelationshipsDestroy.');
        }
        const relatedField = requestParameters?.relatedField;
        if (relatedField === null || relatedField === undefined) {
            throw new Error('Required parameter relatedField was null or undefined when calling coursesRelationshipsDestroy.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/courses/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/relationships/${this.configuration.encodeParam({name: "relatedField", value: relatedField, in: "path", style: "simple", explode: false, dataType: "'course_terms'", dataFormat: undefined})}/`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * View for courses.relationships
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public coursesRelationshipsPartialUpdate(requestParameters?: CoursesRelationshipsPartialUpdateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<CoursesRelationShipsResponse>;
    public coursesRelationshipsPartialUpdate(requestParameters?: CoursesRelationshipsPartialUpdateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CoursesRelationShipsResponse>>;
    public coursesRelationshipsPartialUpdate(requestParameters?: CoursesRelationshipsPartialUpdateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CoursesRelationShipsResponse>>;
    public coursesRelationshipsPartialUpdate(requestParameters?: CoursesRelationshipsPartialUpdateRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesRelationshipsPartialUpdate.');
        }
        const relatedField = requestParameters?.relatedField;
        if (relatedField === null || relatedField === undefined) {
            throw new Error('Required parameter relatedField was null or undefined when calling coursesRelationshipsPartialUpdate.');
        }
        const coursesRelationShips = requestParameters?.coursesRelationShips;

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.api+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/vnd.api+json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/courses/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/relationships/${this.configuration.encodeParam({name: "relatedField", value: relatedField, in: "path", style: "simple", explode: false, dataType: "'course_terms'", dataFormat: undefined})}/`;
        return this.httpClient.request<CoursesRelationShipsResponse>('patch', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: coursesRelationShips,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * View for courses.relationships
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public coursesRelationshipsRetrieve(requestParameters?: CoursesRelationshipsRetrieveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<CoursesRelationShipsResponse>;
    public coursesRelationshipsRetrieve(requestParameters?: CoursesRelationshipsRetrieveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CoursesRelationShipsResponse>>;
    public coursesRelationshipsRetrieve(requestParameters?: CoursesRelationshipsRetrieveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CoursesRelationShipsResponse>>;
    public coursesRelationshipsRetrieve(requestParameters?: CoursesRelationshipsRetrieveRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.api+json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        const id = requestParameters?.id;
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesRelationshipsRetrieve.');
        }
        const relatedField = requestParameters?.relatedField;
        if (relatedField === null || relatedField === undefined) {
            throw new Error('Required parameter relatedField was null or undefined when calling coursesRelationshipsRetrieve.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.api+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/v1/courses/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/relationships/${this.configuration.encodeParam({name: "relatedField", value: relatedField, in: "path", style: "simple", explode: false, dataType: "'course_terms'", dataFormat: undefined})}/`;
        return this.httpClient.request<CoursesRelationShipsResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
