"""
Django settings for training project.

Generated by 'django-admin startproject' using Django 2.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from distutils.util import strtobool

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'c3pz+#@g%crl=bihc347a5)+l@cp==cs=d!3@p7*+_3!fd!yzu')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = strtobool(os.environ.get('DJANGO_DEBUG', 'true'))

ALLOWED_HOSTS = ['*']
INTERNAL_IPS = ['127.0.0.1']

# cause an error if trailing slash is missing rather than a 301 redirect.
APPEND_SLASH = False

# If the X-Forwarded-Host header is set, then use it. This causes URLs in responses (links) to contain the
# given host[:port] of the proxy rather than that of the backend.
USE_X_FORWARDED_HOST = True
# Use this for the X-Forwarded-Proto header:
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
    'rest_framework',
    'rest_framework_json_api',
    # 'debug_toolbar',
    'corsheaders',
    'oauth2_provider',
    'oauth',
    'django_filters',
    'django_extensions',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'training.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'training.wsgi.application'

LOGIN_URL='/admin/login/'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

if os.environ.get('MYSQL_HOST', None):
    password = os.environ.get('MYSQL_PASSWORD', None)
    # unable to pass None/null value in environment
    if password and password.lower() == 'none':
        password = None
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ.get('MYSQL_DB','tsc'),
            'USER': os.environ.get('MYSQL_USER','admin'),
            'PASSWORD': password,
            'HOST': os.environ['MYSQL_HOST'],
            'PORT': os.environ.get('MYSQL_PORT','3306'),
            'OPTIONS': {
                # make mysql 5.6 work sort of right
                'init_command': 'SET default_storage_engine=INNODB,character_set_connection=utf8mb4,'
                                'collation_connection=utf8mb4_unicode_ci,'
                                'sql_mode="STRICT_TRANS_TABLES"'
            }
        }
    }
# otherwise, using local sqlite3:
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
            'OPTIONS': {
                'timeout': 20,
            }
        }
    }



# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/var/www/html'

# DRF and DJA settings
REST_FRAMEWORK = {
    'PAGE_SIZE': 10,
    'EXCEPTION_HANDLER': 'rest_framework_json_api.exceptions.exception_handler',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework_json_api.pagination.JsonApiPageNumberPagination',
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework_json_api.pagination.JsonApiLimitOffsetPagination',
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework_json_api.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework_json_api.renderers.JSONRenderer',  # application/vnd.api+json
        'rest_framework.renderers.BrowsableAPIRenderer',  # text/html: ?format=api
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework_json_api.filters.QueryParameterValidationFilter',  # for query parameter validation
        'rest_framework_json_api.filters.OrderingFilter',  # for sort
        'rest_framework_json_api.django_filters.DjangoFilterBackend',    # for `filter[field]` filtering
        'rest_framework.filters.SearchFilter',    # for keyword filtering across multiple fields
    ),
    'SEARCH_PARAM': 'filter[search]',
    'DEFAULT_METADATA_CLASS': 'rest_framework_json_api.metadata.JSONAPIMetadata',
    'DEFAULT_SCHEMA_CLASS': 'rest_framework_json_api.schemas.openapi.AutoSchema',
    'TEST_REQUEST_DEFAULT_FORMAT': 'vnd.api+json',
    'TEST_REQUEST_RENDERER_CLASSES': (
        'rest_framework_json_api.renderers.JSONRenderer',
    ),
}

JSON_API_FORMAT_TYPES = 'underscore'
# JSON_API_FORMAT_FIELD_NAMES = 'camelize'
JSON_API_PLURALIZE_TYPES = True

# django-oauth-toolkit settings
CORS_ORIGIN_ALLOW_ALL = True

###
# OAuth2/OIDC Server Configuration
# Set env['OAUTH2_SERVER'] to 'self' to use the built-in django-oauth-toolkit server.
# Otherwise et it to a baseURL of an external PingFederate AS.
###
OAUTH2_SERVER = os.environ.get('OAUTH2_SERVER','https://oauth-test.cc.columbia.edu')

# Workaround inability of PyCharm to handle multi-line environment variables by reading
# the OIDC RSA private key from a file. Otherwise just take it from the env.
oidc_key_file = os.environ.get('OIDC_RSA_PRIVATE_KEY_FILE', None)
if oidc_key_file:
    oidc_key = open(oidc_key_file, 'rb').read().decode()
else:
    oidc_key = os.environ.get('OIDC_RSA_PRIVATE_KEY', None)


OAUTH2_PROVIDER = {
    # here's where we add the external introspection endpoint:
    'RESOURCE_SERVER_INTROSPECTION_URL': None if OAUTH2_SERVER == 'self' else OAUTH2_SERVER + '/as/introspect.oauth2',
    'RESOURCE_SERVER_INTROSPECTION_CREDENTIALS': (
        os.environ.get('RESOURCE_SERVER_ID','demo-django-jsonapi-training_validator'),
        os.environ.get('RESOURCE_SERVER_SECRET','SaulGoodman')
    ),
    'SCOPES': {
        "address": "Share my address",
        "read": "Read my resource(s)",
        "openid": "Share my UNI",
        "profile": "Share my name",
        "email": "Share my email address",
        "update": "Update my resource(s)",
        "demo-djt-sla-bronze": "May access the django-jsonapi-training API",
        "auth-columbia": "Columbia University UNI login",
        "delete": "Delete my resources(s)",
        "auth-none": "no login required",
        "https://api.columbia.edu/scope/group": "Share my group memberships",
        "create": "Create my resource(s)",
        "introspection": "Introspect token scope",
    },
    # set an external Userinfo endpoint if using an external OAUTH2 Server:
    'OIDC_USERINFO_ENDPOINT': None if OAUTH2_SERVER == 'self' else OAUTH2_SERVER + '/idp/userinfo.openid',
    # Use internal OIDC implementation if RSA key has been configured:
    'OIDC_ENABLED': True if oidc_key else False,
    'OIDC_RSA_PRIVATE_KEY': oidc_key,
    'PKCE_REQUIRED': True,
    'OAUTH2_VALIDATOR_CLASS': 'myapp.oauth2_validator.CustomOAuth2Validator',
}

# Use swappable models to extend the Access Token to include the userinfo claims.
# N.B. Through trial and error I've found that I had to extend all the models that are related to AccessToken.
# OAUTH2_PROVIDER_APPLICATION_MODEL = "oauth.MyApplication"
OAUTH2_PROVIDER_APPLICATION_MODEL = "oauth2_provider.Application"
OAUTH2_PROVIDER_ACCESS_TOKEN_MODEL = "oauth.MyAccessToken"
OAUTH2_PROVIDER_REFRESH_TOKEN_MODEL = "oauth.MyRefreshToken"
# OAUTH2_PROVIDER_REFRESH_TOKEN_MODEL = "oauth2_provider.RefreshToken"
OAUTH2_PROVIDER_GRANT_MODEL = "oauth2_provider.Grant"
# OAUTH2_PROVIDER_ID_TOKEN_MODEL = "oauth2_provider.IDToken"
OAUTH2_PROVIDER_ID_TOKEN_MODEL = "oauth.MyIDToken"

# debug logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        }
    },
    'formatters': {
        'verbose': {
        'format': '%(asctime)s %(levelname)s %(name)s.%(funcName)s:%(lineno)d: %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        }
    },
    'loggers': {
        'django.db.backends': {
            'level': 'INFO',
            'handlers': ['console'],
        },
        'oauth2_provider': {
            'level': 'DEBUG',
            'handlers': ['console'],
        },
        'oauthlib': {
            'level': 'DEBUG',
            'handlers': ['console'],
        },
        'myapp': {
            'level': 'DEBUG',
            'handlers': ['console'],
        },
        'oauth': {
            'level': 'DEBUG',
            'handlers': ['console'],
        },
    }
}
