[tox]
envlist =
    py{310,311,312}

tox_pip_extensions_ext_venv_update = True
download = true

[gh-actions]
python =
    3.10: py310
    3.11: py311
    3.12: py312

[testenv]
deps =
    -rrequirements.txt
    flake8
    coverage
    isort
    bandit
setenv =
    DJANGO_SETTINGS_MODULE = training.settings
    PYTHONIOENCODING = utf8

commands =
    flake8 --exclude **/migrations,**/migration_overrides myapp oauth
    isort --check-only --diff --skip migrations myapp oauth
    python manage.py check
    bandit --recursive myapp oauth
    coverage erase
    coverage run --source='{toxinidir}/myapp' manage.py test
    coverage html

[testenv:safety]
deps =
    safety
commands =	
    safety scan --ignore 67599,70612 --full-report

[testenv:fix-isort]
deps =
    -rrequirements.txt
    isort
setenv =
    DJANGO_SETTINGS_MODULE = training.settings
commands =
    isort --skip migrations myapp

[testenv:mkdocs]
deps =
    -rdocs/requirements-mkdocs.txt
allowlist_externals =
    /bin/sh
setenv =
    DJANGO_SETTINGS_MODULE = training.settings
commands =
    /bin/sh -c "python manage.py graph_models -g -S --disable-abstract-fields -E -o docs/media/current-uml.png myapp"
    mkdocs build

[testenv:livedocs]
deps =
    -rdocs/requirements-mkdocs.txt
setenv =
    DJANGO_SETTINGS_MODULE = training.settings
commands =
    mkdocs serve -a localhost:9000

[testenv:openapi]
deps =
     -rrequirements.txt
allowlist_externals =
    /bin/sh
setenv =
    DJANGO_SETTINGS_MODULE = training.settings
commands =
    /bin/sh -c "python manage.py spectacular --file docs/schemas/openapi.yaml"
    /bin/sh -c "python manage.py spectacular --format openapi-json --file docs/schemas/openapi.json"

[testenv:docker]
deps =
     -rrequirements.txt
allowlist_externals =
    /bin/sh
    /bin/cp
    /bin/rm
    /usr/bin/printf
    docker
setenv =
    DJANGO_SETTINGS_MODULE = training.settings
commands =
    /bin/rm -rf dist
    python setup.py bdist_wheel
    docker build -t myapp:latest .
    docker image save -o myapp-docker.tar myapp:latest
    /usr/bin/printf '\n\033[0;31m copy the tar to the docker host and do docker image load -i myapp-docker.tar\033[0m\n'

[flake8]
max-line-length = 120
exclude = docs/, myapp/migrations/, .tox/, env/
application-import-names = myapp
builtins = __class__

[isort]
known_first_party = myapp
line_length = 120
